
LCD509_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000021a  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de8  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a7  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043a  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005fa  00000000  00000000  000022bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000028b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	70 d0       	rcall	.+224    	; 0x194 <main>
  b4:	b0 c0       	rjmp	.+352    	; 0x216 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <COMMAND>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	ef e3       	ldi	r30, 0x3F	; 63
  ba:	ff e1       	ldi	r31, 0x1F	; 31
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <COMMAND+0x4>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <COMMAND+0xa>
  c2:	00 00       	nop

void COMMAND(unsigned char byte)
{
	_delay_ms(2);
	
	PORTC = byte & 0xf0;
  c4:	98 2f       	mov	r25, r24
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	95 bb       	out	0x15, r25	; 21
	// 상위 4비트 명령어 쓰기
	PORTC &= 0b11111100;
  ca:	95 b3       	in	r25, 0x15	; 21
  cc:	9c 7f       	andi	r25, 0xFC	; 252
  ce:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	f5 e0       	ldi	r31, 0x05	; 5
  d2:	fa 95       	dec	r31
  d4:	f1 f7       	brne	.-4      	; 0xd2 <COMMAND+0x1a>
  d6:	00 00       	nop
	// RS = 0, RW = 0 명령어를 쓰도록 설정
	_delay_us(1);
	PORTC |= 0b00000100;
  d8:	aa 9a       	sbi	0x15, 2	; 21
  da:	25 e0       	ldi	r18, 0x05	; 5
  dc:	2a 95       	dec	r18
  de:	f1 f7       	brne	.-4      	; 0xdc <COMMAND+0x24>
  e0:	00 00       	nop
	// E = 1, lcd 동작
	_delay_us(1);
	PORTC &= 0b11111011;
  e2:	aa 98       	cbi	0x15, 2	; 21
	PORTC = (byte << 4) & 0xf0;
  e4:	e0 e1       	ldi	r30, 0x10	; 16
  e6:	8e 9f       	mul	r24, r30
  e8:	c0 01       	movw	r24, r0
  ea:	11 24       	eor	r1, r1
  ec:	85 bb       	out	0x15, r24	; 21
	// 하위 4비트 명령어 쓰기
	PORTC &= 0b11111100;
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	8c 7f       	andi	r24, 0xFC	; 252
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	f5 e0       	ldi	r31, 0x05	; 5
  f6:	fa 95       	dec	r31
  f8:	f1 f7       	brne	.-4      	; 0xf6 <COMMAND+0x3e>
  fa:	00 00       	nop
	// RS = 0, RW = 0 명령어를 쓰도록 설정
	_delay_us(1);
	PORTC |= 0b00000100;
  fc:	aa 9a       	sbi	0x15, 2	; 21
  fe:	25 e0       	ldi	r18, 0x05	; 5
 100:	2a 95       	dec	r18
 102:	f1 f7       	brne	.-4      	; 0x100 <COMMAND+0x48>
 104:	00 00       	nop
	// E = 1, lcd 동작
	_delay_us(1);
	PORTC &= 0b11111011;
 106:	aa 98       	cbi	0x15, 2	; 21
 108:	08 95       	ret

0000010a <DATA>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	ef e3       	ldi	r30, 0x3F	; 63
 10c:	ff e1       	ldi	r31, 0x1F	; 31
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <DATA+0x4>
 112:	00 c0       	rjmp	.+0      	; 0x114 <DATA+0xa>
 114:	00 00       	nop

void DATA(unsigned char byte)
{
	_delay_ms(2);
	
	PORTC = byte & 0xf0;
 116:	98 2f       	mov	r25, r24
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	95 bb       	out	0x15, r25	; 21
	// 상위 4비트 명령어 쓰기
	PORTC |= 0b00000001;
 11c:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= 0b11111101;
 11e:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	f5 e0       	ldi	r31, 0x05	; 5
 122:	fa 95       	dec	r31
 124:	f1 f7       	brne	.-4      	; 0x122 <DATA+0x18>
 126:	00 00       	nop
	_delay_us(1);
	PORTC |= 0b00000100;
 128:	aa 9a       	sbi	0x15, 2	; 21
 12a:	25 e0       	ldi	r18, 0x05	; 5
 12c:	2a 95       	dec	r18
 12e:	f1 f7       	brne	.-4      	; 0x12c <DATA+0x22>
 130:	00 00       	nop
	_delay_us(1);
	PORTC &= 0b11111011;
 132:	aa 98       	cbi	0x15, 2	; 21
	
	PORTC = (byte << 4) & 0xf0;
 134:	e0 e1       	ldi	r30, 0x10	; 16
 136:	8e 9f       	mul	r24, r30
 138:	c0 01       	movw	r24, r0
 13a:	11 24       	eor	r1, r1
 13c:	85 bb       	out	0x15, r24	; 21
	
	PORTC |= 0b00000001;
 13e:	a8 9a       	sbi	0x15, 0	; 21
	
	PORTC &= 0b11111101;
 140:	a9 98       	cbi	0x15, 1	; 21
 142:	f5 e0       	ldi	r31, 0x05	; 5
 144:	fa 95       	dec	r31
 146:	f1 f7       	brne	.-4      	; 0x144 <DATA+0x3a>
 148:	00 00       	nop
	
	_delay_us(1);
	PORTC |= 0b00000100;
 14a:	aa 9a       	sbi	0x15, 2	; 21
 14c:	25 e0       	ldi	r18, 0x05	; 5
 14e:	2a 95       	dec	r18
 150:	f1 f7       	brne	.-4      	; 0x14e <DATA+0x44>
 152:	00 00       	nop
	_delay_us(1);
	PORTC &= 0b11111011;
 154:	aa 98       	cbi	0x15, 2	; 21
 156:	08 95       	ret

00000158 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	86 e7       	ldi	r24, 0x76	; 118
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <LCD_INIT+0x6>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_INIT+0x10>
 168:	00 00       	nop

void LCD_INIT(void)
{
	_delay_ms(30);
	
	COMMAND(0b00101000);
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	a5 df       	rcall	.-182    	; 0xb8 <COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	20 ed       	ldi	r18, 0xD0	; 208
 170:	2a 95       	dec	r18
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_INIT+0x18>
	_delay_us(39);
	
	COMMAND(0b00001100);
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	a0 df       	rcall	.-192    	; 0xb8 <COMMAND>
 178:	80 ed       	ldi	r24, 0xD0	; 208
 17a:	8a 95       	dec	r24
	_delay_us(39);
	
	COMMAND(0b00000001);
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_INIT+0x22>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	9b df       	rcall	.-202    	; 0xb8 <COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	87 ee       	ldi	r24, 0xE7	; 231
 184:	97 e1       	ldi	r25, 0x17	; 23
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_INIT+0x2e>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_INIT+0x34>
	_delay_ms(1.53);
	COMMAND(0b00000110);
 18c:	00 00       	nop
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	93 cf       	rjmp	.-218    	; 0xb8 <COMMAND>
 192:	08 95       	ret

00000194 <main>:
char charr[] = {'M','y',' ', 'N', 'a', 'm', 'e', ' ', 'i', 's', ' ', '\0'};

int main(void)
{
	/* Replace with your application code */
	DDRC = 0xff;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 198:	15 ba       	out	0x15, r1	; 21
	int i;
	LCD_INIT();
 19a:	de df       	rcall	.-68     	; 0x158 <LCD_INIT>
	COMMAND(0x0c);				//표시 on
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	8c df       	rcall	.-232    	; 0xb8 <COMMAND>
 1a0:	0c e0       	ldi	r16, 0x0C	; 12
 1a2:	11 e0       	ldi	r17, 0x01	; 1
 1a4:	c0 e4       	ldi	r28, 0x40	; 64
	
	
	
	for (i = 0; i < (sizeof(cg_pat)); i++)
	{
		COMMAND(0x40 + i);
 1a6:	8c 2f       	mov	r24, r28
 1a8:	87 df       	rcall	.-242    	; 0xb8 <COMMAND>
 1aa:	8f e9       	ldi	r24, 0x9F	; 159
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x1a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x20>
 1b4:	00 00       	nop
 1b6:	f8 01       	movw	r30, r16
		_delay_ms(1);
		DATA(cg_pat[i]);
 1b8:	81 91       	ld	r24, Z+
 1ba:	8f 01       	movw	r16, r30
 1bc:	a6 df       	rcall	.-180    	; 0x10a <DATA>
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x2e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x34>
 1c8:	00 00       	nop
 1ca:	cf 5f       	subi	r28, 0xFF	; 255
	COMMAND(0x0c);				//표시 on
	
	
	
	
	for (i = 0; i < (sizeof(cg_pat)); i++)
 1cc:	c8 35       	cpi	r28, 0x58	; 88
 1ce:	59 f7       	brne	.-42     	; 0x1a6 <main+0x12>
		COMMAND(0x40 + i);
		_delay_ms(1);
		DATA(cg_pat[i]);
		_delay_ms(1);
	}
	LCD_INIT();
 1d0:	c3 df       	rcall	.-122    	; 0x158 <LCD_INIT>
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
 1d4:	d1 e0       	ldi	r29, 0x01	; 1
 1d6:	0b e0       	ldi	r16, 0x0B	; 11
 1d8:	11 e0       	ldi	r17, 0x01	; 1
	for (i = 0; i < 11; i++)
	DATA(charr[i]);
 1da:	89 91       	ld	r24, Y+
 1dc:	96 df       	rcall	.-212    	; 0x10a <DATA>
		_delay_ms(1);
		DATA(cg_pat[i]);
		_delay_ms(1);
	}
	LCD_INIT();
	for (i = 0; i < 11; i++)
 1de:	0c 17       	cp	r16, r28
 1e0:	1d 07       	cpc	r17, r29
 1e2:	d9 f7       	brne	.-10     	; 0x1da <main+0x46>
	DATA(charr[i]);
	for (i = 0; i < 3; i++)
	{
		DATA(i);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 df       	rcall	.-222    	; 0x10a <DATA>
 1e8:	ef e9       	ldi	r30, 0x9F	; 159
 1ea:	ff e0       	ldi	r31, 0x0F	; 15
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x58>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x5e>
 1f2:	00 00       	nop
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	89 df       	rcall	.-238    	; 0x10a <DATA>
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x68>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x6e>
 202:	00 00       	nop
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	81 df       	rcall	.-254    	; 0x10a <DATA>
 208:	ef e9       	ldi	r30, 0x9F	; 159
 20a:	ff e0       	ldi	r31, 0x0F	; 15
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0x78>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x7e>
 212:	00 00       	nop
 214:	ff cf       	rjmp	.-2      	; 0x214 <main+0x80>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>

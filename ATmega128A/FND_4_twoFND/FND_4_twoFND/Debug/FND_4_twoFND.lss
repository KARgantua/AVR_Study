
FND_4_twoFND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c8  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000813  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	77 c0       	rjmp	.+238    	; 0x1a4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	64 97       	sbiw	r28, 0x14	; 20
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	int arr[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
  cc:	84 e1       	ldi	r24, 0x14	; 20
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
	int i,j;
	
	DDRA = 0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0xff;
  e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
    while (1) 
    {
		for(i = 100; i >= 0; i--)
		{
			PORTF = arr[i % 100];
  e6:	0f 2e       	mov	r0, r31
  e8:	f4 e6       	ldi	r31, 0x64	; 100
  ea:	cf 2e       	mov	r12, r31
  ec:	d1 2c       	mov	r13, r1
  ee:	f0 2d       	mov	r31, r0
  f0:	0f 2e       	mov	r0, r31
  f2:	f2 e6       	ldi	r31, 0x62	; 98
  f4:	ef 2e       	mov	r14, r31
  f6:	f1 2c       	mov	r15, r1
  f8:	f0 2d       	mov	r31, r0
			PORTA = arr[i % 10];
  fa:	0a e0       	ldi	r16, 0x0A	; 10
  fc:	10 e0       	ldi	r17, 0x00	; 0
	DDRA = 0xff;
	DDRF = 0xff;
	
    while (1) 
    {
		for(i = 100; i >= 0; i--)
  fe:	24 e6       	ldi	r18, 0x64	; 100
 100:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTF = arr[i % 100];
 102:	c9 01       	movw	r24, r18
 104:	b6 01       	movw	r22, r12
 106:	27 d0       	rcall	.+78     	; 0x156 <__divmodhi4>
 108:	fc 01       	movw	r30, r24
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	8c 0f       	add	r24, r28
 114:	9d 1f       	adc	r25, r29
 116:	e8 0f       	add	r30, r24
 118:	f9 1f       	adc	r31, r25
 11a:	80 81       	ld	r24, Z
 11c:	f7 01       	movw	r30, r14
 11e:	80 83       	st	Z, r24
			PORTA = arr[i % 10];
 120:	c9 01       	movw	r24, r18
 122:	b8 01       	movw	r22, r16
 124:	18 d0       	rcall	.+48     	; 0x156 <__divmodhi4>
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	8c 0f       	add	r24, r28
 132:	9d 1f       	adc	r25, r29
 134:	e8 0f       	add	r30, r24
 136:	f9 1f       	adc	r31, r25
 138:	80 81       	ld	r24, Z
 13a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	9f ef       	ldi	r25, 0xFF	; 255
 13e:	e9 e6       	ldi	r30, 0x69	; 105
 140:	f8 e1       	ldi	r31, 0x18	; 24
 142:	91 50       	subi	r25, 0x01	; 1
 144:	e0 40       	sbci	r30, 0x00	; 0
 146:	f0 40       	sbci	r31, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x8a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x94>
 14c:	00 00       	nop
	DDRA = 0xff;
	DDRF = 0xff;
	
    while (1) 
    {
		for(i = 100; i >= 0; i--)
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
 152:	b8 f6       	brcc	.-82     	; 0x102 <main+0x4a>
 154:	d4 cf       	rjmp	.-88     	; 0xfe <main+0x46>

00000156 <__divmodhi4>:
 156:	97 fb       	bst	r25, 7
 158:	07 2e       	mov	r0, r23
 15a:	16 f4       	brtc	.+4      	; 0x160 <__divmodhi4+0xa>
 15c:	00 94       	com	r0
 15e:	06 d0       	rcall	.+12     	; 0x16c <__divmodhi4_neg1>
 160:	77 fd       	sbrc	r23, 7
 162:	08 d0       	rcall	.+16     	; 0x174 <__divmodhi4_neg2>
 164:	0b d0       	rcall	.+22     	; 0x17c <__udivmodhi4>
 166:	07 fc       	sbrc	r0, 7
 168:	05 d0       	rcall	.+10     	; 0x174 <__divmodhi4_neg2>
 16a:	3e f4       	brtc	.+14     	; 0x17a <__divmodhi4_exit>

0000016c <__divmodhi4_neg1>:
 16c:	90 95       	com	r25
 16e:	81 95       	neg	r24
 170:	9f 4f       	sbci	r25, 0xFF	; 255
 172:	08 95       	ret

00000174 <__divmodhi4_neg2>:
 174:	70 95       	com	r23
 176:	61 95       	neg	r22
 178:	7f 4f       	sbci	r23, 0xFF	; 255

0000017a <__divmodhi4_exit>:
 17a:	08 95       	ret

0000017c <__udivmodhi4>:
 17c:	aa 1b       	sub	r26, r26
 17e:	bb 1b       	sub	r27, r27
 180:	51 e1       	ldi	r21, 0x11	; 17
 182:	07 c0       	rjmp	.+14     	; 0x192 <__udivmodhi4_ep>

00000184 <__udivmodhi4_loop>:
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	a6 17       	cp	r26, r22
 18a:	b7 07       	cpc	r27, r23
 18c:	10 f0       	brcs	.+4      	; 0x192 <__udivmodhi4_ep>
 18e:	a6 1b       	sub	r26, r22
 190:	b7 0b       	sbc	r27, r23

00000192 <__udivmodhi4_ep>:
 192:	88 1f       	adc	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	5a 95       	dec	r21
 198:	a9 f7       	brne	.-22     	; 0x184 <__udivmodhi4_loop>
 19a:	80 95       	com	r24
 19c:	90 95       	com	r25
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>

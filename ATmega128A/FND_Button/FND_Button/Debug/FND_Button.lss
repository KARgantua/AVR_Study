
FND_Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000002a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000933  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000829  00000000  00000000  00000c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002de  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000170  00000000  00000000  00001c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	9e c0       	rjmp	.+316    	; 0x146 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	82 d0       	rcall	.+260    	; 0x1c8 <main>
  c4:	98 c0       	rjmp	.+304    	; 0x1f6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:

volatile int count = 0;
int arr[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	
	count++;
  e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  e4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  ee:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	if(count == 10)
  f2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  f6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  fa:	0a 97       	sbiw	r24, 0x0a	; 10
  fc:	21 f4       	brne	.+8      	; 0x106 <__vector_1+0x3e>
		count = 0;
  fe:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 102:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
	PORTF = arr[count];
 106:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 10a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 50       	subi	r30, 0x00	; 0
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	80 81       	ld	r24, Z
 118:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	81 ee       	ldi	r24, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_1+0x5a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_1+0x64>
 12c:	00 00       	nop
	_delay_ms(100);
	
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0b be       	out	0x3b, r0	; 59
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_2>:

ISR(INT1_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	
	count--;
 15e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 162:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 16c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	if(count == -1)
 170:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 174:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	31 f4       	brne	.+12     	; 0x188 <__vector_2+0x42>
		count = 9;
 17c:	89 e0       	ldi	r24, 0x09	; 9
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 184:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	PORTF = arr[count];
 188:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 18c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	91 ee       	ldi	r25, 0xE1	; 225
 1a2:	24 e0       	ldi	r18, 0x04	; 4
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	20 40       	sbci	r18, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <__vector_2+0x5e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <__vector_2+0x68>
 1ae:	00 00       	nop
	_delay_ms(100);
	
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0b be       	out	0x3b, r0	; 59
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <main>:

int main(void)
{
    /* Replace with your application code */
	DDRF = 0xff;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRD = 0xff;
 1ce:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xff;
 1d0:	82 bb       	out	0x12, r24	; 18
	EICRA  = (1<<ISC00);
 1d2:	ea e6       	ldi	r30, 0x6A	; 106
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
	EICRA  = (1<<ISC01);
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
	
	EIMSK |= 1<<INT0;
 1de:	89 b7       	in	r24, 0x39	; 57
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	89 bf       	out	0x39, r24	; 57
	EIMSK |= 1<<INT1;
 1e4:	89 b7       	in	r24, 0x39	; 57
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	89 bf       	out	0x39, r24	; 57
	
	sei();
 1ea:	78 94       	sei
	
	PORTF = arr[0];
 1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x2c>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>

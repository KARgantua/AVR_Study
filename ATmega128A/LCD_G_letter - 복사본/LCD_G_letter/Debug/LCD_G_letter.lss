
LCD_G_letter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c94  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086e  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000408  00000000  00000000  0000200e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	70 d0       	rcall	.+224    	; 0x18a <main>
  aa:	78 c0       	rjmp	.+240    	; 0x19c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <COMMAND>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	ef e3       	ldi	r30, 0x3F	; 63
  b0:	ff e1       	ldi	r31, 0x1F	; 31
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <COMMAND+0x4>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <COMMAND+0xa>
  b8:	00 00       	nop

void COMMAND(unsigned char byte)
{
	_delay_ms(2);
	
	PORTC = byte & 0xf0;
  ba:	98 2f       	mov	r25, r24
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	95 bb       	out	0x15, r25	; 21
	PORTC &= 0b11111100;
  c0:	95 b3       	in	r25, 0x15	; 21
  c2:	9c 7f       	andi	r25, 0xFC	; 252
  c4:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	f5 e0       	ldi	r31, 0x05	; 5
  c8:	fa 95       	dec	r31
  ca:	f1 f7       	brne	.-4      	; 0xc8 <COMMAND+0x1a>
  cc:	00 00       	nop
	
	_delay_us(1);
	PORTC |= 0b00000100;
  ce:	aa 9a       	sbi	0x15, 2	; 21
  d0:	25 e0       	ldi	r18, 0x05	; 5
  d2:	2a 95       	dec	r18
  d4:	f1 f7       	brne	.-4      	; 0xd2 <COMMAND+0x24>
  d6:	00 00       	nop
	_delay_us(1);
	PORTC &= 0b11111011;
  d8:	aa 98       	cbi	0x15, 2	; 21
	PORTC = (byte << 4) & 0xf0;
  da:	e0 e1       	ldi	r30, 0x10	; 16
  dc:	8e 9f       	mul	r24, r30
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	85 bb       	out	0x15, r24	; 21
	PORTC &= 0b11111100;
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8c 7f       	andi	r24, 0xFC	; 252
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	f5 e0       	ldi	r31, 0x05	; 5
  ec:	fa 95       	dec	r31
  ee:	f1 f7       	brne	.-4      	; 0xec <COMMAND+0x3e>
  f0:	00 00       	nop
	_delay_us(1);
	PORTC |= 0b00000100;
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	25 e0       	ldi	r18, 0x05	; 5
  f6:	2a 95       	dec	r18
  f8:	f1 f7       	brne	.-4      	; 0xf6 <COMMAND+0x48>
  fa:	00 00       	nop
	_delay_us(1);
	PORTC &= 0b11111011;
  fc:	aa 98       	cbi	0x15, 2	; 21
  fe:	08 95       	ret

00000100 <DATA>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <DATA+0x4>
 108:	00 c0       	rjmp	.+0      	; 0x10a <DATA+0xa>
 10a:	00 00       	nop

void DATA(unsigned char byte)
{
	_delay_ms(2);
	
	PORTC = byte & 0xf0;
 10c:	98 2f       	mov	r25, r24
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	95 bb       	out	0x15, r25	; 21
	
	PORTC |= 0b00000001;
 112:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= 0b11111101;
 114:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	f5 e0       	ldi	r31, 0x05	; 5
 118:	fa 95       	dec	r31
 11a:	f1 f7       	brne	.-4      	; 0x118 <DATA+0x18>
 11c:	00 00       	nop
	_delay_us(1);
	PORTC |= 0b00000100;
 11e:	aa 9a       	sbi	0x15, 2	; 21
 120:	25 e0       	ldi	r18, 0x05	; 5
 122:	2a 95       	dec	r18
 124:	f1 f7       	brne	.-4      	; 0x122 <DATA+0x22>
 126:	00 00       	nop
	_delay_us(1);
	PORTC &= 0b11111011;
 128:	aa 98       	cbi	0x15, 2	; 21
	
	PORTC = (byte << 4) & 0xf0;
 12a:	e0 e1       	ldi	r30, 0x10	; 16
 12c:	8e 9f       	mul	r24, r30
 12e:	c0 01       	movw	r24, r0
 130:	11 24       	eor	r1, r1
 132:	85 bb       	out	0x15, r24	; 21
	
	PORTC |= 0b00000001;
 134:	a8 9a       	sbi	0x15, 0	; 21
	
	PORTC &= 0b11111101;
 136:	a9 98       	cbi	0x15, 1	; 21
 138:	f5 e0       	ldi	r31, 0x05	; 5
 13a:	fa 95       	dec	r31
 13c:	f1 f7       	brne	.-4      	; 0x13a <DATA+0x3a>
 13e:	00 00       	nop
	
	_delay_us(1);
	PORTC |= 0b00000100;
 140:	aa 9a       	sbi	0x15, 2	; 21
 142:	25 e0       	ldi	r18, 0x05	; 5
 144:	2a 95       	dec	r18
 146:	f1 f7       	brne	.-4      	; 0x144 <DATA+0x44>
 148:	00 00       	nop
	_delay_us(1);
	PORTC &= 0b11111011;
 14a:	aa 98       	cbi	0x15, 2	; 21
 14c:	08 95       	ret

0000014e <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	86 e7       	ldi	r24, 0x76	; 118
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <LCD_INIT+0x6>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_INIT+0x10>
 15e:	00 00       	nop

void LCD_INIT(void)
{
	_delay_ms(30);
	
	COMMAND(0b00101000);
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	a5 df       	rcall	.-182    	; 0xae <COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	20 ed       	ldi	r18, 0xD0	; 208
 166:	2a 95       	dec	r18
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_INIT+0x18>
	_delay_us(39);
	
	COMMAND(0b00001100);
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	a0 df       	rcall	.-192    	; 0xae <COMMAND>
 16e:	80 ed       	ldi	r24, 0xD0	; 208
 170:	8a 95       	dec	r24
	_delay_us(39);
	
	COMMAND(0b00000001);
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_INIT+0x22>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	9b df       	rcall	.-202    	; 0xae <COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	87 ee       	ldi	r24, 0xE7	; 231
 17a:	97 e1       	ldi	r25, 0x17	; 23
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_INIT+0x2e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_INIT+0x34>
	_delay_ms(1.53);
	COMMAND(0b00000110);
 182:	00 00       	nop
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	93 cf       	rjmp	.-218    	; 0xae <COMMAND>
 188:	08 95       	ret

0000018a <main>:
void LCD_INIT(void);
char testcase;
int main(void)
{
    /* Replace with your application code */
	DDRC = 0xff;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 18e:	15 ba       	out	0x15, r1	; 21
	
	LCD_INIT();
 190:	de df       	rcall	.-68     	; 0x14e <LCD_INIT>
	testcase = 'H';
 192:	88 e4       	ldi	r24, 0x48	; 72
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	DATA(testcase);
 198:	b3 df       	rcall	.-154    	; 0x100 <DATA>
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0x10>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>

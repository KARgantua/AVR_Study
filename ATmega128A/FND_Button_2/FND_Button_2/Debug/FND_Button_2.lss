
FND_Button_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ad  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000326  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cc  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	40 d0       	rcall	.+128    	; 0x144 <main>
  c4:	93 c0       	rjmp	.+294    	; 0x1ec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:

volatile int a = 0;
int arr[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	a = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	81 ee       	ldi	r24, 0xE1	; 225
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <__vector_1+0x22>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_1+0x2c>
  f4:	00 00       	nop
	_delay_ms(100);
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_2>:

ISR(INT1_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	a = 2;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 11e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	81 ee       	ldi	r24, 0xE1	; 225
 126:	94 e0       	ldi	r25, 0x04	; 4
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <__vector_2+0x22>
 130:	00 c0       	rjmp	.+0      	; 0x132 <__vector_2+0x2c>
 132:	00 00       	nop
	_delay_ms(100);
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:

int main(void)
{
	int i;
	/* Replace with your application code */
	DDRF = 0xff;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRD = 0xff;
 14a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xff;
 14c:	82 bb       	out	0x12, r24	; 18
	EICRA = (1 << INT0);
 14e:	ea e6       	ldi	r30, 0x6A	; 106
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	EICRA = (1 << INT1);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	80 83       	st	Z, r24
	
	EIMSK |= 1<<INT0;
 15a:	89 b7       	in	r24, 0x39	; 57
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	89 bf       	out	0x39, r24	; 57
	EIMSK |= 1<<INT1;
 160:	89 b7       	in	r24, 0x39	; 57
 162:	82 60       	ori	r24, 0x02	; 2
 164:	89 bf       	out	0x39, r24	; 57
	
	sei();
 166:	78 94       	sei
	
	a = 0;
 168:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 16c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
	PORTF = arr[0];
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 174:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	51 e0       	ldi	r21, 0x01	; 1
				PORTF = arr[i];
				_delay_ms(500);
				}
		else if(a == 2)
			for(i = 9; i >= 0; i--){
				PORTF = arr[i];
 17c:	a2 e6       	ldi	r26, 0x62	; 98
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	24 e1       	ldi	r18, 0x14	; 20
 182:	31 e0       	ldi	r19, 0x01	; 1
	
	a = 0;
	PORTF = arr[0];
	while (1)
	{
		if(a == 1)
 184:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 188:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	91 f4       	brne	.+36     	; 0x1b4 <main+0x70>
 190:	e0 e0       	ldi	r30, 0x00	; 0
 192:	f1 e0       	ldi	r31, 0x01	; 1
			for(i = 0; i <= 9; i++){
				PORTF = arr[i];
 194:	80 81       	ld	r24, Z
 196:	32 96       	adiw	r30, 0x02	; 2
 198:	8c 93       	st	X, r24
 19a:	6f ef       	ldi	r22, 0xFF	; 255
 19c:	89 e6       	ldi	r24, 0x69	; 105
 19e:	98 e1       	ldi	r25, 0x18	; 24
 1a0:	61 50       	subi	r22, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x5c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x66>
 1aa:	00 00       	nop
	a = 0;
	PORTF = arr[0];
	while (1)
	{
		if(a == 1)
			for(i = 0; i <= 9; i++){
 1ac:	e2 17       	cp	r30, r18
 1ae:	f3 07       	cpc	r31, r19
 1b0:	89 f7       	brne	.-30     	; 0x194 <main+0x50>
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <main+0x9e>
				PORTF = arr[i];
				_delay_ms(500);
				}
		else if(a == 2)
 1b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1bc:	02 97       	sbiw	r24, 0x02	; 2
 1be:	89 f4       	brne	.+34     	; 0x1e2 <main+0x9e>
 1c0:	e4 e1       	ldi	r30, 0x14	; 20
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	32 97       	sbiw	r30, 0x02	; 2
			for(i = 9; i >= 0; i--){
				PORTF = arr[i];
 1c6:	80 81       	ld	r24, Z
 1c8:	8c 93       	st	X, r24
 1ca:	6f ef       	ldi	r22, 0xFF	; 255
 1cc:	89 e6       	ldi	r24, 0x69	; 105
 1ce:	98 e1       	ldi	r25, 0x18	; 24
 1d0:	61 50       	subi	r22, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x8c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x96>
 1da:	00 00       	nop
			for(i = 0; i <= 9; i++){
				PORTF = arr[i];
				_delay_ms(500);
				}
		else if(a == 2)
			for(i = 9; i >= 0; i--){
 1dc:	4e 17       	cp	r20, r30
 1de:	5f 07       	cpc	r21, r31
 1e0:	89 f7       	brne	.-30     	; 0x1c4 <main+0x80>
				PORTF = arr[i];
				_delay_ms(500);
			}
		a = 0;
 1e2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 1e6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		
	}
 1ea:	cc cf       	rjmp	.-104    	; 0x184 <main+0x40>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>

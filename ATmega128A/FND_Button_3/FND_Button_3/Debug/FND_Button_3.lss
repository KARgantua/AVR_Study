
FND_Button_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800114  00800114  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b8  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083a  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032c  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f0  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	7b c0       	rjmp	.+246    	; 0x100 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3a d0       	rcall	.+116    	; 0x138 <main>
  c4:	8a c0       	rjmp	.+276    	; 0x1da <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:

int arr[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
volatile char b = 0;

ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	b = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	81 ee       	ldi	r24, 0xE1	; 225
  e2:	94 e0       	ldi	r25, 0x04	; 4
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <__vector_1+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__vector_1+0x26>
  ee:	00 00       	nop
	_delay_ms(100);
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_2>:

ISR(INT1_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	b = 2;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	81 ee       	ldi	r24, 0xE1	; 225
 11a:	94 e0       	ldi	r25, 0x04	; 4
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <__vector_2+0x1c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <__vector_2+0x26>
 126:	00 00       	nop
	_delay_ms(100);
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <main>:
int main(void)
{
    /* Replace with your application code */
    int i = 0;
	
	DDRB = 0xff;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	87 bb       	out	0x17, r24	; 23
	DDRF = 0xff;
 13c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRD = 0x00;
 140:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff;
 142:	82 bb       	out	0x12, r24	; 18
	
	//falling
	EICRA |= 1<<INT0;
 144:	ea e6       	ldi	r30, 0x6A	; 106
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
	EICRA |= 0<<INT1;
 14e:	80 81       	ld	r24, Z
 150:	80 83       	st	Z, r24
	
	EIMSK |= 1<<INT0;
 152:	89 b7       	in	r24, 0x39	; 57
 154:	81 60       	ori	r24, 0x01	; 1
 156:	89 bf       	out	0x39, r24	; 57
	EIMSK |= 1<<INT1;
 158:	89 b7       	in	r24, 0x39	; 57
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	89 bf       	out	0x39, r24	; 57
	
	sei();
 15e:	78 94       	sei
 160:	c4 e1       	ldi	r28, 0x14	; 20
 162:	d1 e0       	ldi	r29, 0x01	; 1
			PORTB |= 1 << i;
			_delay_ms(500);
		}
		else if(b == 2)
		for(i = 0; i <= 9; i++){
			PORTF = arr[i];
 164:	a2 e6       	ldi	r26, 0x62	; 98
 166:	b0 e0       	ldi	r27, 0x00	; 0
	
	while (1) 
    {
		if(b == 1)
		for(i = 0; i < 8; i++){
			PORTB |= 1 << i;
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
	
	sei();
	
	while (1) 
    {
		if(b == 1)
 16c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	d1 f4       	brne	.+52     	; 0x1a8 <main+0x70>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
		for(i = 0; i < 8; i++){
			PORTB |= 1 << i;
 178:	48 b3       	in	r20, 0x18	; 24
 17a:	9b 01       	movw	r18, r22
 17c:	08 2e       	mov	r0, r24
 17e:	02 c0       	rjmp	.+4      	; 0x184 <main+0x4c>
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <main+0x48>
 188:	24 2b       	or	r18, r20
 18a:	28 bb       	out	0x18, r18	; 24
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	39 e6       	ldi	r19, 0x69	; 105
 190:	48 e1       	ldi	r20, 0x18	; 24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	30 40       	sbci	r19, 0x00	; 0
 196:	40 40       	sbci	r20, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x5a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x64>
 19c:	00 00       	nop
	sei();
	
	while (1) 
    {
		if(b == 1)
		for(i = 0; i < 8; i++){
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	88 30       	cpi	r24, 0x08	; 8
 1a2:	91 05       	cpc	r25, r1
 1a4:	49 f7       	brne	.-46     	; 0x178 <main+0x40>
 1a6:	15 c0       	rjmp	.+42     	; 0x1d2 <main+0x9a>
			PORTB |= 1 << i;
			_delay_ms(500);
		}
		else if(b == 2)
 1a8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	89 f4       	brne	.+34     	; 0x1d2 <main+0x9a>
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
		for(i = 0; i <= 9; i++){
			PORTF = arr[i];
 1b4:	80 81       	ld	r24, Z
 1b6:	32 96       	adiw	r30, 0x02	; 2
 1b8:	8c 93       	st	X, r24
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	99 e6       	ldi	r25, 0x69	; 105
 1be:	28 e1       	ldi	r18, 0x18	; 24
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	20 40       	sbci	r18, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x88>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x92>
 1ca:	00 00       	nop
		for(i = 0; i < 8; i++){
			PORTB |= 1 << i;
			_delay_ms(500);
		}
		else if(b == 2)
		for(i = 0; i <= 9; i++){
 1cc:	ec 17       	cp	r30, r28
 1ce:	fd 07       	cpc	r31, r29
 1d0:	89 f7       	brne	.-30     	; 0x1b4 <main+0x7c>
			PORTF = arr[i];
			_delay_ms(500);
		}
		b = 0;
 1d2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		PORTB = 0;
 1d6:	18 ba       	out	0x18, r1	; 24
    }
 1d8:	c9 cf       	rjmp	.-110    	; 0x16c <main+0x34>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
